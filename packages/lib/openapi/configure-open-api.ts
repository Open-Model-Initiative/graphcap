import { apiReference } from "@scalar/hono-api-reference";

import type { AppOpenAPI } from "./types";

import type { z } from "@hono/zod-openapi";
import { zodToJsonSchema } from "zod-to-json-schema";
import packageJSON from "../../datamodel/package.json" with { type: "json" };

export default function configureOpenAPI(app: AppOpenAPI, name: string) {
	app.doc("/doc", {
		openapi: "3.0.0",
		info: {
			version: packageJSON.version,
			title: name,
		},
	});

	app.get(
		"/reference",
		apiReference({
			theme: "kepler",
			layout: "modern",
			defaultHttpClient: {
				targetKey: "js",
				clientKey: "fetch",
			},
			spec: {
				url: "/doc",
			},
		}),
	);
}

// --- Helper Function for OpenAPI Registration with zod-to-json-schema ---
export const registerSchema = <T extends z.ZodTypeAny>(
	name: string,
	schema: T,
	description?: string,
) => {
	const jsonSchema: Record<string, unknown> = zodToJsonSchema(schema, {
		basePath: [`#/components/schemas/${name}`], // Use basePath for defining the schema location
		definitionPath: "components/schemas", // Keep definitionPath to ensure nested schemas are placed correctly
		// name: name, // basePath usually makes explicit name redundant here
		// $refStrategy: 'components', // basePath implies component references
	});

	// Remove the top-level $ref generated by zod-to-json-schema with basePath,
	// as Hono's .openapi() adds its own reference structure.
	// Keep other generated properties.
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	const { $ref, ...restJsonSchema } = jsonSchema as Record<string, unknown>;

	// Use the explicitly provided description if available, otherwise undefined.
	const finalDescription = description;

	return schema.openapi(name, {
		...restJsonSchema, // Spread the rest of the generated schema properties
		// Add the explicit description back if it was provided
		...(finalDescription && { description: finalDescription }),
	});
};
