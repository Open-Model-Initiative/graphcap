/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as AboutImport } from "./routes/about";
import { Route as GalleryDatasetIdImport } from "./routes/gallery/$datasetId";
import { Route as GalleryIndexImport } from "./routes/gallery/index";
import { Route as IndexImport } from "./routes/index";

// Create/Update Routes

const AboutRoute = AboutImport.update({
	id: "/about",
	path: "/about",
	getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRoute,
} as any);

const GalleryIndexRoute = GalleryIndexImport.update({
	id: "/gallery/",
	path: "/gallery/",
	getParentRoute: () => rootRoute,
} as any);

const GalleryDatasetIdRoute = GalleryDatasetIdImport.update({
	id: "/gallery/$datasetId",
	path: "/gallery/$datasetId",
	getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		"/about": {
			id: "/about";
			path: "/about";
			fullPath: "/about";
			preLoaderRoute: typeof AboutImport;
			parentRoute: typeof rootRoute;
		};
		"/gallery/$datasetId": {
			id: "/gallery/$datasetId";
			path: "/gallery/$datasetId";
			fullPath: "/gallery/$datasetId";
			preLoaderRoute: typeof GalleryDatasetIdImport;
			parentRoute: typeof rootRoute;
		};
		"/gallery/": {
			id: "/gallery/";
			path: "/gallery";
			fullPath: "/gallery";
			preLoaderRoute: typeof GalleryIndexImport;
			parentRoute: typeof rootRoute;
		};
	}
}

// Create and export the route tree

export interface FileRoutesByFullPath {
	"/": typeof IndexRoute;
	"/about": typeof AboutRoute;
	"/gallery/$datasetId": typeof GalleryDatasetIdRoute;
	"/gallery": typeof GalleryIndexRoute;
}

export interface FileRoutesByTo {
	"/": typeof IndexRoute;
	"/about": typeof AboutRoute;
	"/gallery/$datasetId": typeof GalleryDatasetIdRoute;
	"/gallery": typeof GalleryIndexRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/": typeof IndexRoute;
	"/about": typeof AboutRoute;
	"/gallery/$datasetId": typeof GalleryDatasetIdRoute;
	"/gallery/": typeof GalleryIndexRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: "/" | "/about" | "/gallery/$datasetId" | "/gallery";
	fileRoutesByTo: FileRoutesByTo;
	to: "/" | "/about" | "/gallery/$datasetId" | "/gallery";
	id: "__root__" | "/" | "/about" | "/gallery/$datasetId" | "/gallery/";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	AboutRoute: typeof AboutRoute;
	GalleryDatasetIdRoute: typeof GalleryDatasetIdRoute;
	GalleryIndexRoute: typeof GalleryIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	AboutRoute: AboutRoute,
	GalleryDatasetIdRoute: GalleryDatasetIdRoute,
	GalleryIndexRoute: GalleryIndexRoute,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/gallery/$datasetId",
        "/gallery/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/gallery/$datasetId": {
      "filePath": "gallery/$datasetId.tsx"
    },
    "/gallery/": {
      "filePath": "gallery/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
