// SPDX-License-Identifier: Apache-2.0
import { useState, useEffect } from 'react';
import { Image } from '@/services/images';
import { captionsService, ImageCaptions, PerspectiveData } from '@/services/captions';

export type PerspectiveType = 
  | 'graph_caption'
  | 'art_critic'
  | 'storytelling'
  | 'poetic_metaphor'
  | 'out_of_frame'
  | 'emotional_sentiment'
  | 'synthesized_caption';

interface UsePerspectivesResult {
  isLoading: boolean;
  error: string | null;
  captions: ImageCaptions | null;
  activePerspective: PerspectiveType | null;
  generatedPerspectives: PerspectiveType[];
  setActivePerspective: (perspective: PerspectiveType) => void;
  generatePerspective: (perspective: PerspectiveType) => void;
  generateAllPerspectives: () => void;
  refreshCaptions: () => Promise<void>;
}

/**
 * Hook for fetching and managing perspective data for an image
 */
export function usePerspectives(image: Image | null): UsePerspectivesResult {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [captions, setCaptions] = useState<ImageCaptions | null>(null);
  const [activePerspective, setActivePerspective] = useState<PerspectiveType | null>(null);
  
  // Derived state for generated perspectives
  const generatedPerspectives = captions 
    ? Object.keys(captions.perspectives) as PerspectiveType[]
    : [];
  
  // Fetch captions when the image changes
  useEffect(() => {
    if (!image) {
      console.log('No image provided to usePerspectives');
      setCaptions(null);
      setActivePerspective(null);
      return;
    }
    
    console.log('Image changed in usePerspectives:', image);
    fetchCaptions(image.path);
  }, [image]);
  
  // Set the active perspective when captions are loaded
  useEffect(() => {
    if (captions && generatedPerspectives.length > 0 && !activePerspective) {
      // Prefer graph_caption if available, otherwise use the first available perspective
      if (generatedPerspectives.includes('graph_caption')) {
        setActivePerspective('graph_caption');
      } else {
        setActivePerspective(generatedPerspectives[0]);
      }
    }
  }, [captions, generatedPerspectives, activePerspective]);
  
  // Function to fetch captions
  const fetchCaptions = async (imagePath: string) => {
    console.log('Fetching captions for path:', imagePath);
    setIsLoading(true);
    setError(null);
    
    try {
      const data = await captionsService.getCaptions(imagePath);
      console.log('Captions received:', data);
      console.log('Perspectives found:', Object.keys(data.perspectives));
      setCaptions(data);
    } catch (err) {
      console.error('Error fetching captions:', err);
      setError(err instanceof Error ? err.message : 'Failed to fetch captions');
    } finally {
      setIsLoading(false);
    }
  };
  
  // Function to refresh captions
  const refreshCaptions = async () => {
    if (!image) return;
    await fetchCaptions(image.path);
  };
  
  // Function to generate a perspective (in a real implementation, this would call an API)
  const generatePerspective = (perspective: PerspectiveType) => {
    console.log(`Generating perspective: ${perspective}`);
    // In a real implementation, this would call an API to generate the perspective
    // For now, we'll just simulate it by adding a mock perspective to the captions
    
    if (!captions || !image) return;
    
    // Create a mock perspective
    const mockPerspective: PerspectiveData = {
      config_name: perspective,
      version: '1',
      model: 'mock-model',
      provider: 'mock-provider',
      content: {
        message: `This is a mock ${perspective} perspective. In a real implementation, this would be generated by the API.`
      }
    };
    
    // Update the captions with the new perspective
    setCaptions({
      ...captions,
      perspectives: {
        ...captions.perspectives,
        [perspective]: mockPerspective
      }
    });
    
    // Set the new perspective as active
    setActivePerspective(perspective);
  };
  
  // Function to generate all perspectives
  const generateAllPerspectives = () => {
    console.log('Generating all perspectives');
    // In a real implementation, this would call an API to generate all perspectives
    
    if (!captions || !image) return;
    
    // List of all perspective types
    const allPerspectives: PerspectiveType[] = [
      'graph_caption',
      'art_critic',
      'storytelling',
      'poetic_metaphor',
      'out_of_frame',
      'emotional_sentiment',
      'synthesized_caption'
    ];
    
    // Generate mock perspectives for any that don't already exist
    const updatedPerspectives = { ...captions.perspectives };
    
    for (const perspective of allPerspectives) {
      if (!updatedPerspectives[perspective]) {
        updatedPerspectives[perspective] = {
          config_name: perspective,
          version: '1',
          model: 'mock-model',
          provider: 'mock-provider',
          content: {
            message: `This is a mock ${perspective} perspective. In a real implementation, this would be generated by the API.`
          }
        };
      }
    }
    
    // Update the captions with the new perspectives
    setCaptions({
      ...captions,
      perspectives: updatedPerspectives
    });
  };
  
  return {
    isLoading,
    error,
    captions,
    activePerspective,
    generatedPerspectives,
    setActivePerspective,
    generatePerspective,
    generateAllPerspectives,
    refreshCaptions
  };
} 