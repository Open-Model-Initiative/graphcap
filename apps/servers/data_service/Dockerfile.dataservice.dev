# SPDX-License-Identifier: Apache-2.0
#########################################################
# Stage 1: Base image with Node, Bun, and essential tools
#########################################################
FROM node:22-slim AS base
RUN apt-get update && apt-get install -y curl lsof net-tools postgresql-client procps unzip wget && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ENV BUN_INSTALL="/usr/local"
RUN curl -fsSL https://bun.sh/install | bash
ENV PATH="/root/.bun/bin:${PATH}"

#########################################################
# Stage 2: Fetch dependencies based only on lockfile
#########################################################
FROM base AS deps-fetch
RUN corepack enable
WORKDIR /app
# Copy only package manifests and lockfile
COPY package.json \
    pnpm-lock.yaml \
    pnpm-workspace.yaml \
    ./
COPY packages/datamodel/package.json ./packages/datamodel/package.json
COPY packages/lib/package.json ./packages/lib/package.json
COPY apps/servers/data_service/package.json ./apps/servers/data_service/package.json

# Fetch dependencies - this layer is cached if lockfile doesn't change
RUN --mount=type=cache,id=pnpm,target=/root/.local/share/pnpm/store \
    pnpm fetch --frozen-lockfile

#########################################################
# Stage 3: Link dependencies using fetched packages and source code
#########################################################
FROM deps-fetch AS deps-link
# Source code is copied here
COPY package.json \
    pnpm-lock.yaml \
    pnpm-workspace.yaml \
    ./
COPY packages/lib packages/lib
COPY packages/datamodel packages/datamodel
COPY apps/servers/data_service apps/servers/data_service

# Install using offline mode - uses fetched packages and links workspace projects
# This layer is cached if lockfile AND source code haven't changed
RUN --mount=type=cache,id=pnpm,target=/root/.local/share/pnpm/store \
    pnpm install --frozen-lockfile 

#########################################################
# Stage 4: Final development image
#########################################################
FROM base AS dev
WORKDIR /app
RUN corepack enable
# Copy root config files needed for pnpm workspace commands
COPY package.json \
    pnpm-lock.yaml \
    pnpm-workspace.yaml \
    ./

# Copy source code needed at runtime
COPY packages/lib packages/lib
COPY packages/datamodel packages/datamodel
COPY apps/servers/data_service apps/servers/data_service

# Copy the FULLY constructed node_modules from the linking stage
COPY --from=deps-link /app/node_modules /app/node_modules
COPY --from=deps-link /app/apps/servers/data_service/node_modules /app/apps/servers/data_service/node_modules
COPY --from=deps-link /app/packages/lib/node_modules /app/packages/lib/node_modules
COPY --from=deps-link /app/packages/datamodel/node_modules /app/packages/datamodel/node_modules

# Ensure entrypoint script is executable
RUN chmod +x /app/apps/servers/data_service/entrypoint.sh

# Expose necessary ports
EXPOSE 32550

# Use the entrypoint script to start the service in dev mode
ENTRYPOINT ["/app/apps/servers/data_service/entrypoint.sh"]
# CMD ["tail", "-f", "/dev/null"]
