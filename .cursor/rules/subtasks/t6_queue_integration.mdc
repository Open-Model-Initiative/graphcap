---
description: 
globs: 
alwaysApply: false
---

# Integrating Batch Capabilities with PerspectiveCardTabbed

Let's update the PerspectiveCardTabbed component to add batch captioning functionality.

```typescript
// graphcap_studio/src/features/perspectives/components/PerspectiveCaption/PerspectiveCard/PerspectiveCardTabbed.tsx

import { ClipboardButton } from "@/components/ui/buttons";
import { useColorModeValue } from "@/components/ui/theme/color-mode";
// SPDX-License-Identifier: Apache-2.0
/**
 * PerspectiveCardTabbed Component
 *
 * A card component for displaying a perspective with tabbed content for caption, prompt, and schema.
 * This component uses Chakra UI tabs for the tabbed interface.
 */
import { 
  Box, 
  Card, 
  Stack, 
  Tabs, 
  Text, 
  HStack, 
  IconButton, 
  Tooltip, 
  Heading
} from "@chakra-ui/react";
import { FiList } from "react-icons/fi"; // Import the queue icon
import type { PerspectiveSchema } from "../../../types";
import { PerspectiveDebug } from "./PerspectiveDebug";
import { SchemaView } from "./SchemaView";
import { CaptionRenderer } from "./schema-fields";

export interface PerspectiveCardTabbedProps {
	readonly schema: PerspectiveSchema;
	readonly data: Record<string, any> | null;
	readonly isActive: boolean;
	readonly isGenerated: boolean;
	readonly onSetActive: () => void;
	readonly onBatchCaption?: (perspectiveName: string) => void; // New prop for batch action
	readonly className?: string;
}

/**
 * Card component for displaying a perspective with tabbed controls
 */
export function PerspectiveCardTabbed({
	schema,
	data,
	isActive,
	isGenerated,
	onSetActive,
	onBatchCaption,
	className = "",
}: PerspectiveCardTabbedProps) {
	const borderColor = useColorModeValue("gray.200", "gray.700");
	const mutedTextColor = useColorModeValue("gray.600", "gray.400");
	const activeBorderColor = useColorModeValue("blue.500", "blue.400");

	const handleBatchCaption = (e: React.MouseEvent) => {
		e.stopPropagation(); // Prevent card click event
		if (onBatchCaption) {
			onBatchCaption(schema.name);
		}
	};

	return (
		<Card.Root
			variant="outline"
			borderColor={isActive ? activeBorderColor : borderColor}
			borderWidth="1px"
			borderLeftWidth={isActive ? "4px" : "1px"}
			overflow="hidden"
			className={className}
			onClick={onSetActive}
			cursor="pointer"
			transition="border-color 0.2s"
			_hover={{
				borderColor: isActive
					? activeBorderColor
					: useColorModeValue("gray.300", "gray.600"),
			}}
			display="flex"
			flexDirection="column"
			maxHeight="100%"
		>
			<Box flexShrink={0}>
				<Tabs.Root
					defaultValue={isGenerated ? "caption" : "prompt"}
					variant="enclosed"
					colorPalette="blue"
					onClick={(e) => e.stopPropagation()}
				>
					<Tabs.List
						bg={useColorModeValue("gray.100", "gray.700")}
						width="100%"
						position="relative"
					>
						<Tabs.Trigger value="caption" disabled={!isGenerated}>
							Caption
						</Tabs.Trigger>
						<Tabs.Trigger value="prompt">Prompt</Tabs.Trigger>
						<Tabs.Trigger value="schema">Schema</Tabs.Trigger>
						<Tabs.Trigger value="debug">Debug</Tabs.Trigger>
						<Tabs.Indicator />
						
						{/* Add batch caption button */}
						{onBatchCaption && (
							<Box position="absolute" right="2" top="50%" transform="translateY(-50%)" zIndex="1">
								<Tooltip 
									label={`Add ${schema.display_name || schema.name} to batch queue`} 
									placement="top"
								>
									<IconButton
										aria-label="Add to batch queue"
										icon={<FiList size="1rem" />}
										size="sm"
										variant="ghost"
										onClick={handleBatchCaption}
									/>
								</Tooltip>
							</Box>
						)}
					</Tabs.List>

					<Box
						bg={useColorModeValue("white", "gray.900")}
						p={2}
						overflow="auto"
						minHeight="150px"
						maxHeight="415px"
					>
						<Tabs.Content value="caption">
							{data ? (
								<Box position="relative">
									<Box position="absolute" top="0" right="0" zIndex="1">
										<ClipboardButton
											content={data}
											label="Copy caption to clipboard"
											size="xs"
											iconOnly
										/>
									</Box>
									<CaptionRenderer data={data} schema={schema} />
								</Box>
							) : (
								<Box textAlign="center" py={4}>
									<Text fontSize="sm" color={mutedTextColor} fontStyle="italic">
										Generate this perspective to see caption
									</Text>
								</Box>
							)}
						</Tabs.Content>

						<Tabs.Content value="prompt">
							<Box position="relative">
								<Box position="absolute" top="0" right="0" zIndex="1">
									<ClipboardButton
										content={schema.prompt}
										label="Copy prompt to clipboard"
										size="xs"
										iconOnly
									/>
								</Box>
								<Box
									whiteSpace="pre-wrap"
									fontSize="sm"
									p={1}
									bg={useColorModeValue("gray.50", "gray.800")}
									borderRadius="md"
								>
									{schema.prompt}
								</Box>
							</Box>
						</Tabs.Content>

						<Tabs.Content value="schema">
							<Box position="relative">
								<Box position="absolute" top="0" right="0" zIndex="1">
									<ClipboardButton
										content={schema}
										label="Copy schema to clipboard"
										size="xs"
										iconOnly
									/>
								</Box>
								<SchemaView schema={schema} />
							</Box>
						</Tabs.Content>

						<Tabs.Content value="debug">
							<PerspectiveDebug data={data} schema={schema} />
						</Tabs.Content>
					</Box>
				</Tabs.Root>
			</Box>

			<Card.Footer
				bg={useColorModeValue("gray.50", "gray.800")}
				p={2}
				borderTop="1px"
				borderColor={borderColor}
				display="flex"
				justifyContent="space-between"
				alignItems="center"
				onClick={(e) => e.stopPropagation()}
				flexShrink={0}
			>
				<Stack direction="row" gap={2}>
					{isGenerated ? (
						<Text fontSize="xs" color={mutedTextColor}>
							Generated from {schema.name}
						</Text>
					) : (
						<Text fontSize="xs" fontStyle="italic" color={mutedTextColor}>
							Not generated yet
						</Text>
					)}
				</Stack>

				{/* Metadata - e.g., timestamps or version info */}
				<Text fontSize="xs" color={mutedTextColor}>
					{data?.metadata?.timestamp &&
						new Date(data.metadata.timestamp).toLocaleString()}
				</Text>
			</Card.Footer>
		</Card.Root>
	);
}
```

## Adding the Batch Dialog Integration

Now let's create a component that handles the dialog state and connects with PerspectiveCardTabbed:

```typescript
// graphcap_studio/src/features/perspectives/components/PerspectiveCaption/PerspectiveContainer.tsx

// SPDX-License-Identifier: Apache-2.0
/**
 * PerspectiveContainer Component
 *
 * Container component that wraps perspective cards and manages batch processing functionality.
 */

import { useState } from "react";
import { Box } from "@chakra-ui/react";
import { PerspectiveCardTabbed } from "./PerspectiveCard/PerspectiveCardTabbed";
import { JobCreationDialog } from "../../../batch-queue/components/JobCreationDialog";
import type { PerspectiveSchema } from "../../types";

interface PerspectiveContainerProps {
  perspectives: PerspectiveSchema[];
  data: Record<string, Record<string, any> | null>;
  activePerspective: string;
  onSetActivePerspective: (name: string) => void;
  currentImagePath?: string;
}

export function PerspectiveContainer({
  perspectives,
  data,
  activePerspective,
  onSetActivePerspective,
  currentImagePath
}: PerspectiveContainerProps) {
  const [batchDialogOpen, setBatchDialogOpen] = useState(false);
  const [batchDialogParams, setBatchDialogParams] = useState({
    initialImage: "",
    initialPerspective: ""
  });

  const handleBatchCaption = (perspectiveName: string) => {
    setBatchDialogParams({
      initialImage: currentImagePath || "",
      initialPerspective: perspectiveName
    });
    setBatchDialogOpen(true);
  };

  return (
    <Box>
      {perspectives.map((perspective) => (
        <PerspectiveCardTabbed
          key={perspective.name}
          schema={perspective}
          data={data[perspective.name]}
          isActive={activePerspective === perspective.name}
          isGenerated={!!data[perspective.name]}
          onSetActive={() => onSetActivePerspective(perspective.name)}
          onBatchCaption={handleBatchCaption}
          className="mb-4"
        />
      ))}

      <JobCreationDialog
        isOpen={batchDialogOpen}
        onClose={() => setBatchDialogOpen(false)}
        initialImage={batchDialogParams.initialImage}
        initialPerspective={batchDialogParams.initialPerspective}
      />
    </Box>
  );
}
```

## Adding Batch Actions to Image Context Menus

Let's also create a hook that can be used in image context menus:

```typescript
// graphcap_studio/src/features/batch-queue/hooks/useBatchActions.tsx

// SPDX-License-Identifier: Apache-2.0
/**
 * useBatchActions Hook
 *
 * Provides batch captioning actions for use in context menus and other UI elements.
 */

import { useState } from "react";
import { JobCreationDialog } from "../components/JobCreationDialog";

export function useBatchActions() {
  const [batchDialogOpen, setBatchDialogOpen] = useState(false);
  const [batchDialogParams, setBatchDialogParams] = useState({
    initialImage: "",
    initialPerspective: ""
  });

  const openBatchDialog = (initialImage = "", initialPerspective = "") => {
    setBatchDialogParams({ initialImage, initialPerspective });
    setBatchDialogOpen(true);
  };

  const BatchDialog = () => (
    <JobCreationDialog
      isOpen={batchDialogOpen}
      onClose={() => setBatchDialogOpen(false)}
      initialImage={batchDialogParams.initialImage}
      initialPerspective={batchDialogParams.initialPerspective}
    />
  );

  return {
    openBatchDialog,
    BatchDialog
  };
}
```

## Example Usage in Image Grid Component

```typescript
// Example Image Grid Component

import { MenuItem, useDisclosure } from "@chakra-ui/react";
import { useBatchActions } from "../batch-queue/hooks/useBatchActions";

export function ImageGrid({ images }) {
  const { openBatchDialog, BatchDialog } = useBatchActions();

  // Render image grid with context menu
  return (
    <>
      {images.map(image => (
        <Box key={image.path}>
          {/* Image display */}
          <Menu>
            <MenuButton as={IconButton} aria-label="Options" icon={<FiMoreVertical />} />
            <MenuList>
              <MenuItem onClick={() => openBatchDialog(image.path)}>
                Add to Batch Queue...
              </MenuItem>
              {/* Other menu items */}
            </MenuList>
          </Menu>
        </Box>
      ))}
      
      {/* Render the dialog component once */}
      <BatchDialog />
    </>
  );
}
```

This implementation:

1. Adds a batch queue button to the PerspectiveCardTabbed component
2. Creates a container component to manage the dialog state
3. Provides a reusable hook for batch actions in other components
4. Ensures the button styling matches the existing UI

The batch button is positioned in the tab bar area to be discoverable yet unobtrusive, and uses a tooltip to explain its function. When clicked, it opens the JobCreationDialog with the specific perspective pre-selected.
