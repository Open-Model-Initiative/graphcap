---
description: Current Task for the Agent
globs: 
alwaysApply: true
---
# Task
### Is your feature request related to a problem?
- Currently batch captioning is only available in the offline pipelines and not through the ui. We should be able to schedule batch captions, view the current queue, and edit the caption queue/ cancel jobs.

### Describe the solution you'd like
- Add capability to batch multiple captions 
- Add capability to view the queue
- Add capability to batch by image (i.e perform these captions for this image)
- Add capability to batch by perspective (i.e run this perspective on this dataset) 
- Ensure UI updates as captions come in

# GraphCap Batch Captioning - Refined Implementation Plan

## Core Components

### 1. Backend Queue System
   - Job manager with database persistence (7-day retention with archive)
   - First-in-first-out prioritization with user-controlled queue reordering
   - Status tracking with image-level progress and failure tracking
   - Dependency resolution between jobs
   - Configurable concurrent processing with user-adjustable limits

### 2. API Extensions
   - Batch job submission endpoints (various patterns)
   - Queue management endpoints with reordering capability
   - Status reporting endpoints with partial completion details
   - WebSocket connection for real-time job updates
   - Historical performance tracking for job estimation

### 3. UI Components
   - Queue panel in left sidebar with live updates
   - Batch operation dialog with progressive disclosure (simple/advanced views)
   - Contextual batch action buttons in PerspectiveCardTabbed component
   - Job detail view with per-image tracking
   - Archive view for completed jobs

## Operation Patterns Support

### 1. Multi-Perspective (Single Image)
   - Select one image, apply multiple perspectives
   - Trigger from PerspectiveCardTabbed component
   - Show checkboxes for all available perspectives (12+ identified)
   - Group perspectives by category or function

### 2. Dataset-Perspective (Bulk Processing)
   - Select a dataset (12+ datasets identified)
   - Apply a single perspective to all images
   - Show estimated processing time based on historical tracking
   - Configurable concurrency based on resource availability

### 3. Backfill Missing Perspectives
   - Analyze existing captions and identify gaps
   - Queue jobs to generate only missing perspectives
   - Continue processing other images when individual ones fail
   - Provide retry options for failed individual images

### 4. Dependency Chains
   - Analyze perspective requirements (e.g., synthesized_caption)
   - Auto-generate prerequisite jobs
   - Visualize and manage the dependency chain
   - Track partial completion across the chain

## Implementation Phases

### Phase 1: Core Backend
- Database schema with 7-day retention and archiving capability
- Basic job processing engine with FIFO scheduling
- REST API endpoints for job submission and status
- WebSocket infrastructure for real-time updates

### Phase 2: Basic UI
- Queue panel in left sidebar with simple/advanced views
- Job list with reordering capability
- Job detail views with per-image tracking
- Integration with PerspectiveCardTabbed component

### Phase 3: Advanced Features
- Operation pattern dialogs with progressive disclosure
- Dependency resolution for complex jobs
- Batch optimization algorithms
- Historical performance tracking for job estimation

### Phase 4: Real-time Updates
- WebSocket notifications for job status changes
- ors
- Auto-refresh of UI when captions complete
- Queue manipulation with immediate server sync

## Technical Implementation Details

1. **Queue Management**
   - First-in-first-out prioritization by default
   - User interface for reordering the queue
   - Database backup for persistence across restarts

2. **Concurrency Controls**
   - Fixed concurrency limits configurable via UI
   - Separate limits for different provider types
   - Rate limiting to prevent API overloading

3. **Error Handling**
   - Track success/failure at individual image level
   - Continue processing other images when one fails
   - Detailed error reporting with retry options
   - Batch retry functionality for failed images

4. **Data Persistence**
   - Keep recent jobs (7 days) in active queue
   - Archive older completed jobs automatically
   - Provide archive view for historical reference
   - Allow restoring archived jobs when needed

5. **UI Integration**
   - Batch actions triggered from PerspectiveCardTabbed component
   - Queue management panel in the left sidebar
   - Context-sensitive batch options based on current view

6. **Real-time Updates**
   - WebSocket connection for push notifications
   - Status updates sent when job progress changes
   - UI refreshes automatically when captions complete
   - Detailed progress tracking at image level

7. **Resource Estimation**
   - Historical performance tracking by perspective type
   - Rolling averages of processing time by provider
   - Dynamic estimates that improve with more usage data
   - User-visible ETA for queued and running jobs

8. **User Experience**
   - Progressive disclosure interface for different user levels
   - Simple view for basic operations, advanced for power users
   - Live updates with expandable details
   - Visual indicators for job progress and status

   
# GraphCap Batch Captioning - WebSocket Integration Overview

## Architecture
```
┌─────────────────┐                          ┌─────────────────┐
│                 │      REST API            │                 │
│  Hono Backend   │◄─────────────────────────┤  React Client   │
│  (Data Service) │      GET/POST/PUT        │                 │
│                 │                          │                 │
│  ┌───────────┐  │      WebSocket           │  ┌───────────┐  │
│  │ Job Queue │  │◄─────────────────────────┤  │ TanStack  │  │
│  │ Manager   │  │      Real-time Events    │  │ Query     │  │
│  └───────────┘  │                          │  └───────────┘  │
└─────────────────┘                          └─────────────────┘
```

## Key Components

### Backend (Hono)
- **WebSocket Server**: Broadcasts job events to connected clients
- **Job Event Bus**: Emits events when job status changes
- **Job Processor**: Updates job progress and emits events

### Frontend (React + TanStack Query)
- **WebSocket Hook**: Manages connection and reconnection logic
- **TanStack Query Integration**: Updates cache from WebSocket events
- **Queue Panel**: Displays real-time job status with auto-refresh

## Event Types
- `JOB_CREATED`: New job added to queue
- `JOB_STARTED`: Job begins processing
- `JOB_PROGRESS`: Job progress updates (0-100%)
- `JOB_COMPLETED`: Job finished successfully
- `JOB_FAILED`: Job encountered errors
- `JOB_CANCELLED`: Job stopped by user
- `QUEUE_REORDERED`: Queue priority changed

## Implementation Strategy
1. Use TanStack Query for initial data loading and mutations
2. Enhance with WebSocket for real-time updates
3. Fallback to polling if WebSocket disconnects
4. Optimistic UI updates for immediate feedback

