---
description: Current Task for the Agent
globs: 
alwaysApply: true
---
### Is your feature request related to a problem?
Currently, provider configurations in GraphCap are managed through static TOML files (`provider.config.toml`), requiring file edits and service restarts to make changes. This makes it difficult to dynamically manage provider configurations and their API keys. We need a more flexible and secure way to manage these configurations through the GraphCap Studio UI. We'll need downstream support for storing large amounts of data and this seems like an easy entry point.

### Describe the solution you'd like
Create a new data service using Drizzle ORM that provides:

1. **Database Schema**
   - Provider configurations (name, kind, environment, base URL)
   - Provider models (linked to providers)
   - Rate limits configuration
   - Encrypted storage for API keys

2. **REST API Endpoints**
   - CRUD operations for providers
   - Secure API key management
   - Model and rate limit configuration

3. **Development Tools**
   - Drizzle Kit Studio integration for database management
   - Seeding functionality to import existing TOML configurations
   - Migration management

4. **UI Integration**
   - Provider management interface in GraphCap Studio
   - Secure API key input and storage
   - Configuration validation

The UI will orchestrate data flow between services, with no direct coupling between the data service and GraphCap Server.

### Alternatives Considered
1. **Enhanced File-based Configuration**
   - Continue using TOML files but add file watching and hot reloading
   - Drawbacks: Still requires file access, no audit trail, harder to manage in production

2. **Direct Database Integration in GraphCap Server**
   - Add database functionality directly to the server
   - Drawbacks: Tighter coupling, mixing concerns, harder to maintain

3. **Environment Variables**
   - Store configurations in environment variables
   - Drawbacks: Hard to update dynamically, limited structure, no UI management

### Additional Context
Example provider configuration structure:
```typescript
interface Provider {
  id: number;
  name: string;
  kind: string;
  environment: 'cloud' | 'local';
  baseUrl: string;
  envVar: string;
  apiKey?: string;  // Stored encrypted
  isEnabled: boolean;
  models: ProviderModel[];
  rateLimits?: RateLimits;
}
```


Service ports:
- Data Service API: 32550
- Drizzle Kit Studio: 32501
